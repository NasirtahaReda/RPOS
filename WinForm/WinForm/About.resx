<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="memoEdit1.EditValue" xml:space="preserve">
    <value>النسخة 12.0:
 - التحويل الي السيرفر الخاص
 - إضافة التقرير المالي اليومي
 - إضافة التقرير اليومي للمنصرفات
 
=============================================

النسخة 11.3:
 - إمكانية طباعة الباركود بدون السعر


النسخة 11.2:
 -  حل مشكلة إضافة الورديات
 - إمكانية تغير الوان الشاشات 
النسخة 11.1:
 -  إضافة امكانية التحويل لرضا3
 - 

النسخة 10.5:
 -  إضافة تقرير جديد لطابعه الباركود ZebraBarcodeLabel
-  تغيير اسم التقرير القديم الي SbarcoBarcodeLabel
 - 
النسخة 10.4:
 - تعديل تقرير ملخص الحسابات للموظف بإضافة عدد الورديات، مجموع المنصرف، مجموع الدخل خلال الفترة 
 - ارسال رسالة لنظام الموبايل عند ترحيل فاتورة التالف
 - ارسال رسالة لنظام الموبايل عند صرف أي منصرف من النظام

النسخة 10.3:
 - ارسال رسالة عند تغير السعر (للموبايل وللنظام)
 - إضافة امكانبة إضافة فواتير التالف
 - تعديل رسالة قفل الوردية بإضافة كل المعلومات
 - تنبيه عند دخول وخروج موظف الوردية الثاني
 - إمكانية إضافة عدد من الساعات للموظف عند الحاجة
 - إيقاف إضافة الأصناف لشاشة البيع عند تحويل فاتورة الشراء  Marquee Text


النسخة 10.2:
 -  إضافة إمكانية حذف موظف من الوردية غير الموظف الرئيسي
- 


النسخة 10.1:
 -  إضافة امكانية ادخال اصناف لفاتورة البيع من خلال الأرقام السريعه
- حساب منصرف الوردية بالساعة من خلال حساب مدة عمل الموظف من لحظة فتح النظام حتي لحظة خروجه
- إمكانية إضافة أكثر من موظف للوردية


النسخة 10.0:
 - إضافة رسائل تنبيه في أعلي شاشة البيع
 - تم إضافة إعدادات لرسائل الموبايل 
-

النسخة 9.1.3:
 - تغيير خدمة ارسال رسائل رسائل الموبايل بخدمة PushMessage
- 9.1.4:
 - ارسال رسالة للموبايل عند الجرد  المباشر



النسخة 8.0.0:
 - إضافة شاشة تأكيد البيع مع تحديد المبلغ  المستلم من الزبون

النسخة 8.1.0:
 - إضافة شاشة الضبط
- إضافة إمكانية الدخول كمسؤول
- قراءة ارقام رسائل الموبايل والأيميل من شاشة الضبط


النسخة 8.1.2:
 - تعديل في طريقة إظهار شاشة الجرد
- إمكانية عرض الأصناف بالكمية صفر في شاشة الجرد


النسخة 8.1.1:
 - حل مشكلة التعديل في الأسعار للأصناف
 

النسخة 7.1.3:
 - إضافة امكانية إرسال بيانات الوردية عن طريق الايميل
- إضافة الأيميلات في ملف ال Config
- تحسين طريقة ارسال الأيميل

النسخة 7.1.2:
 - إضافة امكانية مسح الباركود الإضافي
 - 

النسخة 7.1.0:
- إدخال الأصناف بدون بار كود مباشر في الفاتورة
- إدخال المصروفات المباشرة
- ترحيل المشتروات والوردية  للمنصرفات المباشرة


النسخة 7.1.1:
- إصلاح مشكلة صنف بدون باركود 


النسخة 7.0.2:
- إضافة امكانية ارسال رسالة واتس اب عند صرف اي منصرف
- التنبيه بالواتس اب عند وصول اي صنف حد إعادة الطلب

النسخة 7.0.0:
- إمكانية إضافة أكثر من فاتورة بيع
- إصلاح مشكلة رسائل الموبايل
- تعديل في طريقة قراءة الباركود
-حل مشكلة زيادة الاصناف في فاتورة البيع
- التحكم في حجم الخط في الشاشة باستخدام + و -


النسخة 6.6: 
- حل مشكلة رسائل  الموبايل باستخدام ال Thread

النسخة 6.5:
- حل مشكلة الأصناف السريعه بإعادة تحميل  الكميات بعد بيع الفاتورة
- حل مشكلة نهاية الوردية

النسخة6.4:
- إضافة  الباركود الأصلي للصنف في شاشة الأصناص
- إظهار الباركود في شاشة الأصناف
- إمكانية قراء الباركود الأصلي للصنف في شاشة البيع
- إصلاح الخطأ في شاشة الوردية
- إظهار رقم نسخة البرنامج في الشاشة الرئيسة

النسخة6.3:
- ضبط حجم طباعة الباركود
- ارسال للواتس عند إدخال صنف بدون باركود في فاتورة البيع
- إضافة SplashScreen  للشاشة الدخول وللنظام


النسخة 6.2:
- إضافة شاشة  رسائل الموبايل التي تم ارسالها
- مسح رسالة الواتس بعد الإرسال

النسخة6.1:
 - إرسال رسائل الواتس أب بالضغط علي زر الإدخال



النسخة 6:
- إضافة رسائل الواتس آب
- إضافة شاشات الجرد</value>
  </data>
</root>